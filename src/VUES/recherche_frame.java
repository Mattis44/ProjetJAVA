/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VUES;

import java.util.ArrayList;
import javax.swing.JFrame;
import java.util.Date;
import java.util.List;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import METIERS.Critique;
import java.sql.SQLException;
import java.util.Comparator;
import javax.swing.table.DefaultTableModel;
import CONTROLEURS.Ctrlmain;
import java.util.logging.Level;
import java.util.logging.Logger;
import METIERS.Role;

/**
 *
 * @author mattis
 */
public class recherche_frame extends javax.swing.JFrame {
    
    private Ctrlmain ctrlmain;
    private main_frame Mainframe;
    private JTable table;
    
    /**
     * Creates new form recherche_frame
     */
    public recherche_frame(main_frame Mainframe) {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setTitle("Resto FR - Recherche par critères");
        this.Mainframe = Mainframe;
        this.table = Mainframe.getTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jDateChooserSemaine1 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jDateChooserSemaine2 = new com.toedter.calendar.JDateChooser();
        jCheckBoxMasquerAvis = new javax.swing.JCheckBox();
        jButtonCriteres = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Date");

        jLabel2.setText("Critères");

        jLabel3.setText("Semaine du");

        jLabel4.setText("au");

        jCheckBoxMasquerAvis.setText("Afficher les avis masqués");
        jCheckBoxMasquerAvis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMasquerAvisActionPerformed(evt);
            }
        });

        jButtonCriteres.setText("Rechercher");
        jButtonCriteres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCriteresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDateChooserSemaine1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDateChooserSemaine2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonCriteres)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxMasquerAvis))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jDateChooserSemaine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jDateChooserSemaine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMasquerAvis)
                    .addComponent(jButtonCriteres))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxMasquerAvisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMasquerAvisActionPerformed

    }//GEN-LAST:event_jCheckBoxMasquerAvisActionPerformed

    private void jButtonCriteresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCriteresActionPerformed
        Date date = jDateChooser.getDate();
        Date dateSemaine1 = jDateChooserSemaine1.getDate();
        Date dateSemaine2 = jDateChooserSemaine2.getDate();
        
        if(date == null) {
            if(dateSemaine1 == null || dateSemaine2 == null){
                try {
                    // Si la rien est remplie, on remplie normalement la JTable.
                    afficherCritiques();
                } catch (SQLException ex) {
                    Logger.getLogger(recherche_frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                // dateSemaine1 & dateSemaine2 sont remplis.
                afficherCritiquesEntreDates(dateSemaine1, dateSemaine2);
            }
        } else {
            if(dateSemaine1 != null || dateSemaine2 != null){
                System.out.println("Veuillez remplir correctement les informations.");
            } else {
                // Date remplie
                afficherCritiquesParDate(date);
            }
        }
    }//GEN-LAST:event_jButtonCriteresActionPerformed

    
   
    public void afficherCritiques() throws SQLException {
        Role userRole = Mainframe.getRole();
        ArrayList<Critique> critiques = DAO.critiqueDAO.getAll(userRole.getId() == 3);
        System.out.println("174 : " + critiques);
        DefaultTableModel model = (DefaultTableModel) Mainframe.getTable().getModel();
        model.setRowCount(0);
        for (Critique critique : critiques) {
            System.out.println("178 : " + critique);
            String[] row = {critique.getUnUtilisateur().getEmail(), critique.getUnResto().getNom(), critique.getDate().toString(), critique.getCommentaire(), critique.isMasquer() ? "Masquer" : "Afficher"};
            model.addRow(row);
        }
    }
    
    
    
   public void afficherCritiquesParDate(Date dateChoisie) {
    try {
        java.sql.Date dateSql = new java.sql.Date(dateChoisie.getTime());
        ArrayList<Critique> critiques = DAO.critiqueDAO.getAllByDate(dateSql);
        System.out.println("174 : " + critiques);
        DefaultTableModel model = (DefaultTableModel) Mainframe.getTable().getModel();
        model.setRowCount(0);
        for (Critique critique : critiques) {
            System.out.println("178 : " + critique);
                String[] row = {critique.getUnUtilisateur().getEmail(), critique.getUnResto().getNom(), critique.getDate().toString(), critique.getCommentaire(), critique.isMasquer() ? "Masquer" : "Afficher"};
                model.addRow(row);
        }
    } catch (SQLException ex) {
        System.out.println("Erreur DAO getAll()");
    }
}
   
   public void afficherCritiquesEntreDates(Date dateChoisie1, Date dateChoisie2) {
    try {
        java.sql.Date dateSql1 = new java.sql.Date(dateChoisie1.getTime());
        java.sql.Date dateSql2 = new java.sql.Date(dateChoisie2.getTime());
        ArrayList<Critique> critiques = DAO.critiqueDAO.getAllBetweenDates(dateSql1, dateSql2);
        System.out.println("174 : " + critiques);
        DefaultTableModel model = (DefaultTableModel) Mainframe.getTable().getModel();
        model.setRowCount(0);
        for (Critique critique : critiques) {
            System.out.println("178 : " + critique);
                String[] row = {critique.getUnUtilisateur().getEmail(), critique.getUnResto().getNom(), critique.getDate().toString(), critique.getCommentaire(), critique.isMasquer() ? "Masquer" : "Afficher"};
                model.addRow(row);
        }
    } catch (SQLException ex) {
        System.out.println("Erreur DAO getAll()");
    }
}


    

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCriteres;
    private javax.swing.JCheckBox jCheckBoxMasquerAvis;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private com.toedter.calendar.JDateChooser jDateChooserSemaine1;
    private com.toedter.calendar.JDateChooser jDateChooserSemaine2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
